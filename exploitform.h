#ifndef EXPLOITFORM_H
#define EXPLOITFORM_H

#include <QWidget>
#include <QMouseEvent>
#include <QFileDialog>
#include <QMessageBox>

#include "utils.h"
#include "processhelper.h"
#include "rustprotect.h"
#include "DesignUtils/runline.h"
#include "subhwid.h"
#include "license.h"
#include "fshield.h"
#include "rustbuster.h"

#define ORIGINAL_ADDRESS(RELATIVE_ADDRESS,CALLING_ADDRESS) (RELATIVE_ADDRESS + CALLING_ADDRESS + 5)

#define rCall 0xE8
#define aCall 0xFF

namespace Ui {

enum RUST_PROTECTS
{
    RUST_PROTECT,
    RUST_FSHIELD,
    RUST_BOOSTER,
    UNKNOWN
};

class ExploitForm;
}

class ExploitForm : public QWidget
{
    Q_OBJECT

public:
        explicit ExploitForm(QWidget *parent = nullptr);

        void mousePressEvent(QMouseEvent *event)
        {
              // Запоминаем позицию при нажатии кнопки мыши
                mpos = event->pos();
        }
        void  mouseMoveEvent(QMouseEvent *event)
        {
            if (mpos.x() >= 0 && event->buttons() && Qt::LeftButton)
            {
                QPoint diff = event->pos() - mpos;
                QPoint newpos = this->pos() + diff;
                this->move(newpos);
            }
        }
        void  mouseReleaseEvent(QMouseEvent *){
            mpos = QPoint(-1, -1);
        }
        void Initialize();

    ~ExploitForm();

private Q_SLOTS:
        void on_pushButton_2_clicked();

        void on_pushButton_clicked();

        void on_pushButton_3_clicked();

        void on_pushButton_5_clicked();

        void on_radioButton_clicked();

        void on_radioButton_2_clicked();

        void on_radioButton_3_clicked();

        void on_pushButton_7_clicked();

        void on_pushButton_6_clicked();

        void on_pushButton_4_clicked();


        void on_pushButton_8_clicked();

        void on_pushButton_9_clicked();

        void on_pushButton_10_clicked();

private:
    Ui::ExploitForm *ui;
    QPoint mpos;

    //Design
    QMessageBox error;
    Ui::RUST_PROTECTS current_protect;   
    //License
    License license;

    //Process
    DWORD pID = 0;
    p_helper mono_helper;
    HMODULE m_hProcessHelper;
    char name_space[255];
    char class_name[255];
    char method_name[255];
};

#endif // EXPLOITFORM_H
